name: Deploy 100days to VPS
on:
    push:
        branches: ["main"]

permissions:
    contents: read

jobs:
    deploy:
        runs-on: ubuntu-latest

        env:
            SERVER_HOST: ${{ secrets.SERVER_HOST }}
            SERVER_USER: ${{ secrets.SERVER_USER }}
            SERVER_PORT: ${{ secrets.SERVER_PORT }}
            DOMAIN: ${{ secrets.DOMAIN }}
            ANSIBLE_VAULT_PASS: ${{ secrets.ANSIBLE_VAULT_PASS }}

        steps:
            - name: Checkout app repo
              uses: actions/checkout@v4

            - name: Checkout infra repo (ansible_hetzner)
              uses: actions/checkout@v4
              with:
                  repository: jiordiviera/infra-ansible-hetzner
                  token: ${{ secrets.INFRA_TOKEN }}
                  path: infra/ansible_hetzner

            - name: Start SSH agent with deploy key
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

            - name: Add VPS to known_hosts (strict)
              run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan -p "${SERVER_PORT:-22}" "${SERVER_HOST}" >> ~/.ssh/known_hosts
                  chmod 644 ~/.ssh/known_hosts

            - name: Install Ansible (runner)
              run: |
                  python3 -m pip install --upgrade pip
                  pip install ansible

            - name: Rsync playbooks to server
              run: |
                  rsync -az --delete infra/ansible_hetzner/ "${SERVER_USER}"@"${SERVER_HOST}":/home/"${SERVER_USER}"/ansible_hetzner/

            - name: Write Ansible Vault password on server (optional)
              if: ${{ env.ANSIBLE_VAULT_PASS != '' }}
              run: |
                  ssh -p "${SERVER_PORT:-22}" "${SERVER_USER}"@"${SERVER_HOST}" \
                    "set -eu; cd ~/ansible_hetzner; umask 077; printf '%s' '${ANSIBLE_VAULT_PASS}' > .vault_pass.txt"

            - name: Bootstrap server deps (make + ansible)
              run: |
                  ssh -p "${SERVER_PORT:-22}" "${SERVER_USER}"@"${SERVER_HOST}" '
                  set -eux
                  # make
                  if ! command -v make >/dev/null 2>&1; then
                      sudo DEBIAN_FRONTEND=noninteractive apt-get update
                      sudo DEBIAN_FRONTEND=noninteractive apt-get install -y make
                  fi

                  # ansible (si le Makefile appelle ansible localement)
                  if ! command -v ansible-playbook >/dev/null 2>&1; then
                      # Option A: paquet Ubuntu (simple)
                      sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ansible-core || true

                      # Option B fallback: pip (au cas où)
                      if ! command -v ansible-playbook >/dev/null 2>&1; then
                      sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-pip
                      python3 -m pip install --user --upgrade pip
                      python3 -m pip install --user ansible
                      # Assure le PATH user local (ssh non-login)
                      echo "export PATH=\$HOME/.local/bin:\$PATH" >> ~/.profile
                      fi
                  fi
                  '

            - name: Prepare SSH known_hosts (server)
              run: |
                mkdir -p ~/.ssh
                chmod 700 ~/.ssh
                # Nettoyer d'anciennes entrées si l'IP/host a changé
                ssh-keygen -R "[$SERVER_HOST]:${SERVER_PORT:-22}" || true
                ssh-keygen -R "$SERVER_HOST" || true
                # Scanner et ajouter l'empreinte (ED25519 d’abord, sinon fallback)
                (ssh-keyscan -p "${SERVER_PORT:-22}" -t ed25519 "$SERVER_HOST" 2>/dev/null || \
                ssh-keyscan -p "${SERVER_PORT:-22}" "$SERVER_HOST" 2>/dev/null) >> ~/.ssh/known_hosts
                chmod 600 ~/.ssh/known_hosts

            - name: Run deploy playbook remotely
              run: |
                  ssh -p "${SERVER_PORT:-22}" "${SERVER_USER}"@"${SERVER_HOST}" \
                  'bash -s' -- "${DOMAIN:-}" <<'REMOTE'
                  set -euxo pipefail
                  cd ~/ansible_hetzner

                  DOMAIN_ARG="${1:-}"
                  if [ -n "$DOMAIN_ARG" ]; then
                  make deploy D="$DOMAIN_ARG"
                  else
                  make deploy D=100days.jiordiviera.me
                  fi
                  REMOTE
